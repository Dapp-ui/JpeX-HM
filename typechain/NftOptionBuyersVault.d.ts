/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NftOptionBuyersVaultInterface extends ethers.utils.Interface {
  functions: {
    "BASE_UNIT()": FunctionFragment;
    "NFT_OPTIONS_SELLER_VAULT_ADDRESS()": FunctionFragment;
    "WETH()": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "claimEarningsForStrike(uint256)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "depositInOptionBuyersVault(uint256,uint256)": FunctionFragment;
    "epochExpiry(uint256)": FunctionFragment;
    "epochState(uint256)": FunctionFragment;
    "epochStrikes(uint256,uint256)": FunctionFragment;
    "epochStrikesToPremium(uint256,uint256)": FunctionFragment;
    "expireEpoch()": FunctionFragment;
    "getByteEncodedUserAndStrike(address,uint256)": FunctionFragment;
    "getEpochStrikes()": FunctionFragment;
    "getUserDepositsForStrike(address,uint256)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "nft()": FunctionFragment;
    "optionType()": FunctionFragment;
    "owner()": FunctionFragment;
    "provideLiquidityToOptionSellersVault()": FunctionFragment;
    "setEpochState(uint256)": FunctionFragment;
    "setOptionWriterVaultAddress(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setTotalEarningsForStrike(uint256,uint256)": FunctionFragment;
    "startNewEpochWithExpiry(uint256[],uint256[],uint256)": FunctionFragment;
    "totalDepositInStrike(uint256,uint256)": FunctionFragment;
    "totalEarningsForStrike(uint256,uint256)": FunctionFragment;
    "userDepositInStrike(uint256,bytes32)": FunctionFragment;
    "withdrawFromOptionBuyersVault(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NFT_OPTIONS_SELLER_VAULT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimEarningsForStrike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositInOptionBuyersVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStrikes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStrikesToPremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getByteEncodedUserAndStrike",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStrikes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositsForStrike",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optionType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidityToOptionSellersVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionWriterVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTotalEarningsForStrike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewEpochWithExpiry",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositInStrike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarningsForStrike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositInStrike",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromOptionBuyersVault",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NFT_OPTIONS_SELLER_VAULT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimEarningsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInOptionBuyersVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStrikesToPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getByteEncodedUserAndStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optionType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidityToOptionSellersVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionWriterVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTotalEarningsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewEpochWithExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositInStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarningsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositInStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromOptionBuyersVault",
    data: BytesLike
  ): Result;

  events: {
    "CompleteWithdraw(address,uint256)": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "EarningsClaimed(address,uint256)": EventFragment;
    "NewEpoch(uint256)": EventFragment;
    "PartialWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompleteWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarningsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialWithdraw"): EventFragment;
}

export type CompleteWithdrawEvent = TypedEvent<
  [string, BigNumber] & { user: string; withdrawAmount: BigNumber }
>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber] & { user: string; depositAmount: BigNumber }
>;

export type EarningsClaimedEvent = TypedEvent<
  [string, BigNumber] & { user: string; earnings: BigNumber }
>;

export type NewEpochEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type PartialWithdrawEvent = TypedEvent<
  [string, BigNumber] & { user: string; withdrawAmount: BigNumber }
>;

export class NftOptionBuyersVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NftOptionBuyersVaultInterface;

  functions: {
    BASE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    NFT_OPTIONS_SELLER_VAULT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "NFT_OPTIONS_SELLER_VAULT_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimEarningsForStrike(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimEarningsForStrike(uint256)"(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositInOptionBuyersVault(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositInOptionBuyersVault(uint256,uint256)"(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochState(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expireEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getByteEncodedUserAndStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getByteEncodedUserAndStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEpochStrikes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getEpochStrikes()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUserDepositsForStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserDepositsForStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    "nft()"(overrides?: CallOverrides): Promise<[string]>;

    optionType(overrides?: CallOverrides): Promise<[number]>;

    "optionType()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidityToOptionSellersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "provideLiquidityToOptionSellersVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochState(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEpochState(uint256)"(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionWriterVaultAddress(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOptionWriterVaultAddress(address)"(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalEarningsForStrike(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTotalEarningsForStrike(uint256,uint256)"(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNewEpochWithExpiry(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startNewEpochWithExpiry(uint256[],uint256[],uint256)"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDepositInStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDepositInStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEarningsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalEarningsForStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userDepositInStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userDepositInStrike(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFromOptionBuyersVault(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromOptionBuyersVault(uint256,uint256)"(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  NFT_OPTIONS_SELLER_VAULT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "NFT_OPTIONS_SELLER_VAULT_ADDRESS()"(
    overrides?: CallOverrides
  ): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  authorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "authorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimEarningsForStrike(
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimEarningsForStrike(uint256)"(
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  deauthorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deauthorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositInOptionBuyersVault(
    depositAmount: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositInOptionBuyersVault(uint256,uint256)"(
    depositAmount: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochExpiry(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochExpiry(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochState(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "epochState(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochStrikes(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikesToPremium(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochStrikesToPremium(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expireEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "expireEpoch()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getByteEncodedUserAndStrike(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getByteEncodedUserAndStrike(address,uint256)"(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEpochStrikes(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getEpochStrikes()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUserDepositsForStrike(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserDepositsForStrike(address,uint256)"(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

  "isAuthorized(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nft(overrides?: CallOverrides): Promise<string>;

  "nft()"(overrides?: CallOverrides): Promise<string>;

  optionType(overrides?: CallOverrides): Promise<number>;

  "optionType()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  provideLiquidityToOptionSellersVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "provideLiquidityToOptionSellersVault()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochState(
    state: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEpochState(uint256)"(
    state: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionWriterVaultAddress(
    nftOptionSellerVaultAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOptionWriterVaultAddress(address)"(
    nftOptionSellerVaultAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalEarningsForStrike(
    strike_: BigNumberish,
    earnings: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTotalEarningsForStrike(uint256,uint256)"(
    strike_: BigNumberish,
    earnings: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNewEpochWithExpiry(
    strikes: BigNumberish[],
    premiums: BigNumberish[],
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startNewEpochWithExpiry(uint256[],uint256[],uint256)"(
    strikes: BigNumberish[],
    premiums: BigNumberish[],
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDepositInStrike(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDepositInStrike(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEarningsForStrike(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalEarningsForStrike(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDepositInStrike(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userDepositInStrike(uint256,bytes32)"(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFromOptionBuyersVault(
    withdrawAmount: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromOptionBuyersVault(uint256,uint256)"(
    withdrawAmount: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    NFT_OPTIONS_SELLER_VAULT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    "NFT_OPTIONS_SELLER_VAULT_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    authorize(who: string, overrides?: CallOverrides): Promise<void>;

    "authorize(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimEarningsForStrike(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimEarningsForStrike(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(who: string, overrides?: CallOverrides): Promise<void>;

    "deauthorize(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInOptionBuyersVault(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositInOptionBuyersVault(uint256,uint256)"(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochState(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireEpoch(overrides?: CallOverrides): Promise<void>;

    "expireEpoch()"(overrides?: CallOverrides): Promise<void>;

    getByteEncodedUserAndStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getByteEncodedUserAndStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEpochStrikes(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getEpochStrikes()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUserDepositsForStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserDepositsForStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nft(overrides?: CallOverrides): Promise<string>;

    "nft()"(overrides?: CallOverrides): Promise<string>;

    optionType(overrides?: CallOverrides): Promise<number>;

    "optionType()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    provideLiquidityToOptionSellersVault(
      overrides?: CallOverrides
    ): Promise<void>;

    "provideLiquidityToOptionSellersVault()"(
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochState(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEpochState(uint256)"(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptionWriterVaultAddress(
      nftOptionSellerVaultAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOptionWriterVaultAddress(address)"(
      nftOptionSellerVaultAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(who: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    setTotalEarningsForStrike(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalEarningsForStrike(uint256,uint256)"(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewEpochWithExpiry(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startNewEpochWithExpiry(uint256[],uint256[],uint256)"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDepositInStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDepositInStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEarningsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalEarningsForStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositInStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositInStrike(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromOptionBuyersVault(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromOptionBuyersVault(uint256,uint256)"(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CompleteWithdraw(address,uint256)"(
      user?: string | null,
      withdrawAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; withdrawAmount: BigNumber }
    >;

    CompleteWithdraw(
      user?: string | null,
      withdrawAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; withdrawAmount: BigNumber }
    >;

    "Deposited(address,uint256)"(
      user?: string | null,
      depositAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; depositAmount: BigNumber }
    >;

    Deposited(
      user?: string | null,
      depositAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; depositAmount: BigNumber }
    >;

    "EarningsClaimed(address,uint256)"(
      user?: string | null,
      earnings?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; earnings: BigNumber }
    >;

    EarningsClaimed(
      user?: string | null,
      earnings?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; earnings: BigNumber }
    >;

    "NewEpoch(uint256)"(
      epoch?: null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    NewEpoch(epoch?: null): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "PartialWithdraw(address,uint256)"(
      user?: string | null,
      withdrawAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; withdrawAmount: BigNumber }
    >;

    PartialWithdraw(
      user?: string | null,
      withdrawAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; withdrawAmount: BigNumber }
    >;
  };

  estimateGas: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    NFT_OPTIONS_SELLER_VAULT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "NFT_OPTIONS_SELLER_VAULT_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimEarningsForStrike(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimEarningsForStrike(uint256)"(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositInOptionBuyersVault(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositInOptionBuyersVault(uint256,uint256)"(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochState(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getByteEncodedUserAndStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getByteEncodedUserAndStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikes(overrides?: CallOverrides): Promise<BigNumber>;

    "getEpochStrikes()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDepositsForStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserDepositsForStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    "nft()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionType(overrides?: CallOverrides): Promise<BigNumber>;

    "optionType()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidityToOptionSellersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "provideLiquidityToOptionSellersVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochState(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEpochState(uint256)"(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionWriterVaultAddress(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOptionWriterVaultAddress(address)"(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalEarningsForStrike(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTotalEarningsForStrike(uint256,uint256)"(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNewEpochWithExpiry(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startNewEpochWithExpiry(uint256[],uint256[],uint256)"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDepositInStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDepositInStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEarningsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalEarningsForStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositInStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositInStrike(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromOptionBuyersVault(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromOptionBuyersVault(uint256,uint256)"(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFT_OPTIONS_SELLER_VAULT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "NFT_OPTIONS_SELLER_VAULT_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimEarningsForStrike(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimEarningsForStrike(uint256)"(
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositInOptionBuyersVault(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositInOptionBuyersVault(uint256,uint256)"(
      depositAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochState(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getByteEncodedUserAndStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getByteEncodedUserAndStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEpochStrikes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDepositsForStrike(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserDepositsForStrike(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidityToOptionSellersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "provideLiquidityToOptionSellersVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochState(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEpochState(uint256)"(
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionWriterVaultAddress(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOptionWriterVaultAddress(address)"(
      nftOptionSellerVaultAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalEarningsForStrike(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTotalEarningsForStrike(uint256,uint256)"(
      strike_: BigNumberish,
      earnings: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNewEpochWithExpiry(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startNewEpochWithExpiry(uint256[],uint256[],uint256)"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDepositInStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDepositInStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEarningsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalEarningsForStrike(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositInStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDepositInStrike(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromOptionBuyersVault(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromOptionBuyersVault(uint256,uint256)"(
      withdrawAmount: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
