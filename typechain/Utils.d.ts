/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UtilsInterface extends ethers.utils.Interface {
  functions: {
    "BASE_UNIT()": FunctionFragment;
    "ONE()": FunctionFragment;
    "PRE_LIQUIDATION_WINDOW()": FunctionFragment;
    "WETH()": FunctionFragment;
    "concatenate(string,string)": FunctionFragment;
    "getNftOptionVaultName(string,uint256,uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRE_LIQUIDATION_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "concatenate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftOptionVaultName",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRE_LIQUIDATION_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "concatenate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftOptionVaultName",
    data: BytesLike
  ): Result;

  events: {};
}

export class Utils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UtilsInterface;

  functions: {
    BASE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    concatenate(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "concatenate(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNftOptionVaultName(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { nftOptionVaultName: string }>;

    "getNftOptionVaultName(string,uint256,uint256,uint8)"(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { nftOptionVaultName: string }>;
  };

  BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  concatenate(a: string, b: string, overrides?: CallOverrides): Promise<string>;

  "concatenate(string,string)"(
    a: string,
    b: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getNftOptionVaultName(
    nft: string,
    strike: BigNumberish,
    expiry: BigNumberish,
    optionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getNftOptionVaultName(string,uint256,uint256,uint8)"(
    nft: string,
    strike: BigNumberish,
    expiry: BigNumberish,
    optionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    concatenate(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "concatenate(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNftOptionVaultName(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNftOptionVaultName(string,uint256,uint256,uint8)"(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    concatenate(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "concatenate(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftOptionVaultName(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNftOptionVaultName(string,uint256,uint256,uint8)"(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRE_LIQUIDATION_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRE_LIQUIDATION_WINDOW()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    concatenate(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "concatenate(string,string)"(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftOptionVaultName(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNftOptionVaultName(string,uint256,uint256,uint8)"(
      nft: string,
      strike: BigNumberish,
      expiry: BigNumberish,
      optionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
