/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NftOptionSellersVaultInterface extends ethers.utils.Interface {
  functions: {
    "BASE_UNIT()": FunctionFragment;
    "ONE()": FunctionFragment;
    "PRE_LIQUIDATION_WINDOW()": FunctionFragment;
    "WETH()": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "bootstrap()": FunctionFragment;
    "calculatePNL(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "depositMultipleNftAndMintOptions(uint256[],uint256[])": FunctionFragment;
    "depositNftAndMintOption(uint256,uint256)": FunctionFragment;
    "depositWethForStrikeToReclaimNFT(uint256)": FunctionFragment;
    "epochExpiry(uint256)": FunctionFragment;
    "epochSettlement(uint256)": FunctionFragment;
    "epochSettlementPrice(uint256)": FunctionFragment;
    "epochStrikeTokens(uint256,uint256)": FunctionFragment;
    "epochStrikes(uint256,uint256)": FunctionFragment;
    "epochStrikesToPremium(uint256,uint256)": FunctionFragment;
    "erc20Implementation()": FunctionFragment;
    "expireEpoch(uint256)": FunctionFragment;
    "getEpochTokensName(uint256)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isNftClaimable(address,uint256)": FunctionFragment;
    "liquidateNFT(uint256,address)": FunctionFragment;
    "nft()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "rescue()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPremiumsForStrikes(uint256[],uint256[])": FunctionFragment;
    "setStrikes(uint256[])": FunctionFragment;
    "settle(uint256,address)": FunctionFragment;
    "startNewEpochWithExpiry(uint256)": FunctionFragment;
    "totalEpochNftDepositsForStrike(uint256,uint256,uint256)": FunctionFragment;
    "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)": FunctionFragment;
    "userEpochNftClaimableStatus(bytes32,uint256)": FunctionFragment;
    "userWethBalance(address)": FunctionFragment;
    "usersForThatEpochStrike(uint256,uint256,uint256)": FunctionFragment;
    "wethRequiredToReclaimNFT(address,uint256)": FunctionFragment;
    "withdrawAllClaimableNFTs()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_UNIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRE_LIQUIDATION_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "bootstrap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePNL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositMultipleNftAndMintOptions",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftAndMintOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWethForStrikeToReclaimNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochSettlement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochSettlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStrikeTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStrikes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochStrikesToPremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochTokensName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isNftClaimable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateNFT",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rescue", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPremiumsForStrikes",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewEpochWithExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEpochNftDepositsForStrike",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userEpochNFTDepositsForStrike",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userEpochNftClaimableStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWethBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersForThatEpochStrike",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethRequiredToReclaimNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllClaimableNFTs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRE_LIQUIDATION_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePNL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMultipleNftAndMintOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNftAndMintOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWethForStrikeToReclaimNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStrikeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStrikesToPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochTokensName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNftClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumsForStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStrikes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startNewEpochWithExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEpochNftDepositsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEpochNFTDepositsForStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEpochNftClaimableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWethBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersForThatEpochStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethRequiredToReclaimNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllClaimableNFTs",
    data: BytesLike
  ): Result;

  events: {
    "EpochExpired(uint256,uint256)": EventFragment;
    "EpochUpdated(uint256)": EventFragment;
    "PremiumUpdatedForCurrentEpoch(uint256,uint256[],uint256[])": EventFragment;
    "Settled(uint256,uint256)": EventFragment;
    "SettlementPriceUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EpochExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PremiumUpdatedForCurrentEpoch"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementPriceUpdated"): EventFragment;
}

export type EpochExpiredEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; settlementPrices: BigNumber }
>;

export type EpochUpdatedEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type PremiumUpdatedForCurrentEpochEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]] & {
    epoch: BigNumber;
    strikes: BigNumber[];
    premiums: BigNumber[];
  }
>;

export type SettledEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; strike: BigNumber }
>;

export type SettlementPriceUpdatedEvent = TypedEvent<
  [BigNumber] & { settlementPrice: BigNumber }
>;

export class NftOptionSellersVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NftOptionSellersVaultInterface;

  functions: {
    BASE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bootstrap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePNL(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculatePNL(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    "contractAddress()"(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositMultipleNftAndMintOptions(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositMultipleNftAndMintOptions(uint256[],uint256[])"(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNftAndMintOption(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositNftAndMintOption(uint256,uint256)"(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWethForStrikeToReclaimNFT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositWethForStrikeToReclaimNFT(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochSettlement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochSettlement(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochSettlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochSettlementPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "epochStrikeTokens(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    erc20Implementation(overrides?: CallOverrides): Promise<[string]>;

    "erc20Implementation()"(overrides?: CallOverrides): Promise<[string]>;

    expireEpoch(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "expireEpoch(uint256)"(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEpochTokensName(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEpochTokensName(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNftClaimable(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "isNftClaimable(address,uint256)"(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidateNFT(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidateNFT(uint256,address)"(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    "nft()"(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rescue()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumsForStrikes(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPremiumsForStrikes(uint256[],uint256[])"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStrikes(uint256[])"(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "settle(uint256,address)"(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startNewEpochWithExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startNewEpochWithExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalEpochNftDepositsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalEpochNftDepositsForStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEpochNFTDepositsForStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEpochNftClaimableStatus(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userEpochNftClaimableStatus(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userWethBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usersForThatEpochStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "usersForThatEpochStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wethRequiredToReclaimNFT(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "wethRequiredToReclaimNFT(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAllClaimableNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAllClaimableNFTs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  authorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "authorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bootstrap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bootstrap()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePNL(
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePNL(uint256)"(
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  "contractAddress()"(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  deauthorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deauthorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositMultipleNftAndMintOptions(
    tokenIds: BigNumberish[],
    strikes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositMultipleNftAndMintOptions(uint256[],uint256[])"(
    tokenIds: BigNumberish[],
    strikes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNftAndMintOption(
    tokenId: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositNftAndMintOption(uint256,uint256)"(
    tokenId: BigNumberish,
    strike_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWethForStrikeToReclaimNFT(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositWethForStrikeToReclaimNFT(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochExpiry(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochExpiry(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochSettlement(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochSettlement(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochSettlementPrice(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochSettlementPrice(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikeTokens(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "epochStrikeTokens(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  epochStrikes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochStrikes(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikesToPremium(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epochStrikesToPremium(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  erc20Implementation(overrides?: CallOverrides): Promise<string>;

  "erc20Implementation()"(overrides?: CallOverrides): Promise<string>;

  expireEpoch(
    settlementPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "expireEpoch(uint256)"(
    settlementPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEpochTokensName(
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEpochTokensName(uint256)"(
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

  "isAuthorized(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNftClaimable(
    user: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "isNftClaimable(address,uint256)"(
    user: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidateNFT(
    tokenId: BigNumberish,
    manualLiquidationAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidateNFT(uint256,address)"(
    tokenId: BigNumberish,
    manualLiquidationAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  "nft()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rescue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rescue()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumsForStrikes(
    strikes: BigNumberish[],
    premiums: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPremiumsForStrikes(uint256[],uint256[])"(
    strikes: BigNumberish[],
    premiums: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrikes(
    strikes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStrikes(uint256[])"(
    strikes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    strike_: BigNumberish,
    buyersVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "settle(uint256,address)"(
    strike_: BigNumberish,
    buyersVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startNewEpochWithExpiry(
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startNewEpochWithExpiry(uint256)"(
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalEpochNftDepositsForStrike(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalEpochNftDepositsForStrike(uint256,uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEpochNFTDepositsForStrike(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)"(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEpochNftClaimableStatus(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userEpochNftClaimableStatus(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userWethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userWethBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usersForThatEpochStrike(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "usersForThatEpochStrike(uint256,uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  wethRequiredToReclaimNFT(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "wethRequiredToReclaimNFT(address,uint256)"(
    user: string,
    strike_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawAllClaimableNFTs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAllClaimableNFTs()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    authorize(who: string, overrides?: CallOverrides): Promise<void>;

    "authorize(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bootstrap(overrides?: CallOverrides): Promise<boolean>;

    "bootstrap()"(overrides?: CallOverrides): Promise<boolean>;

    calculatePNL(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePNL(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    "contractAddress()"(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(who: string, overrides?: CallOverrides): Promise<void>;

    "deauthorize(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMultipleNftAndMintOptions(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "depositMultipleNftAndMintOptions(uint256[],uint256[])"(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftAndMintOption(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositNftAndMintOption(uint256,uint256)"(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWethForStrikeToReclaimNFT(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWethForStrikeToReclaimNFT(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSettlement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochSettlement(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSettlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochSettlementPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "epochStrikeTokens(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20Implementation(overrides?: CallOverrides): Promise<string>;

    "erc20Implementation()"(overrides?: CallOverrides): Promise<string>;

    expireEpoch(
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "expireEpoch(uint256)"(
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEpochTokensName(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEpochTokensName(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNftClaimable(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isNftClaimable(address,uint256)"(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateNFT(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateNFT(uint256,address)"(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    "nft()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rescue(overrides?: CallOverrides): Promise<void>;

    "rescue()"(overrides?: CallOverrides): Promise<void>;

    setOwner(who: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    setPremiumsForStrikes(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPremiumsForStrikes(uint256[],uint256[])"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrikes(uint256[])"(
      strikes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256,address)"(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewEpochWithExpiry(
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startNewEpochWithExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalEpochNftDepositsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalEpochNftDepositsForStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochNFTDepositsForStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochNftClaimableStatus(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userEpochNftClaimableStatus(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userWethBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersForThatEpochStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "usersForThatEpochStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    wethRequiredToReclaimNFT(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wethRequiredToReclaimNFT(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllClaimableNFTs(overrides?: CallOverrides): Promise<void>;

    "withdrawAllClaimableNFTs()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EpochExpired(uint256,uint256)"(
      epoch?: null,
      settlementPrices?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; settlementPrices: BigNumber }
    >;

    EpochExpired(
      epoch?: null,
      settlementPrices?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; settlementPrices: BigNumber }
    >;

    "EpochUpdated(uint256)"(
      epoch?: null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    EpochUpdated(
      epoch?: null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "PremiumUpdatedForCurrentEpoch(uint256,uint256[],uint256[])"(
      epoch?: BigNumberish | null,
      strikes?: BigNumberish[] | null,
      premiums?: BigNumberish[] | null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      { epoch: BigNumber; strikes: BigNumber[]; premiums: BigNumber[] }
    >;

    PremiumUpdatedForCurrentEpoch(
      epoch?: BigNumberish | null,
      strikes?: BigNumberish[] | null,
      premiums?: BigNumberish[] | null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      { epoch: BigNumber; strikes: BigNumber[]; premiums: BigNumber[] }
    >;

    "Settled(uint256,uint256)"(
      epoch?: null,
      strike?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; strike: BigNumber }
    >;

    Settled(
      epoch?: null,
      strike?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; strike: BigNumber }
    >;

    "SettlementPriceUpdated(uint256)"(
      settlementPrice?: null
    ): TypedEventFilter<[BigNumber], { settlementPrice: BigNumber }>;

    SettlementPriceUpdated(
      settlementPrice?: null
    ): TypedEventFilter<[BigNumber], { settlementPrice: BigNumber }>;
  };

  estimateGas: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRE_LIQUIDATION_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_LIQUIDATION_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bootstrap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePNL(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePNL(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "contractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositMultipleNftAndMintOptions(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositMultipleNftAndMintOptions(uint256[],uint256[])"(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNftAndMintOption(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositNftAndMintOption(uint256,uint256)"(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWethForStrikeToReclaimNFT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositWethForStrikeToReclaimNFT(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSettlement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochSettlement(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochSettlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochSettlementPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikeTokens(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erc20Implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "erc20Implementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    expireEpoch(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "expireEpoch(uint256)"(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEpochTokensName(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochTokensName(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNftClaimable(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isNftClaimable(address,uint256)"(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateNFT(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidateNFT(uint256,address)"(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    "nft()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rescue()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumsForStrikes(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPremiumsForStrikes(uint256[],uint256[])"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStrikes(uint256[])"(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "settle(uint256,address)"(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startNewEpochWithExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startNewEpochWithExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalEpochNftDepositsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalEpochNftDepositsForStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochNFTDepositsForStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochNftClaimableStatus(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userEpochNftClaimableStatus(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userWethBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersForThatEpochStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "usersForThatEpochStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethRequiredToReclaimNFT(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wethRequiredToReclaimNFT(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllClaimableNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAllClaimableNFTs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE_UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ONE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRE_LIQUIDATION_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRE_LIQUIDATION_WINDOW()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bootstrap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePNL(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePNL(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositMultipleNftAndMintOptions(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositMultipleNftAndMintOptions(uint256[],uint256[])"(
      tokenIds: BigNumberish[],
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNftAndMintOption(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositNftAndMintOption(uint256,uint256)"(
      tokenId: BigNumberish,
      strike_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWethForStrikeToReclaimNFT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositWethForStrikeToReclaimNFT(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochExpiry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochExpiry(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochSettlement(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochSettlement(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochSettlementPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochSettlementPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochStrikeTokens(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochStrikes(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikesToPremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochStrikesToPremium(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20Implementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "erc20Implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireEpoch(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "expireEpoch(uint256)"(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEpochTokensName(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochTokensName(uint256)"(
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNftClaimable(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isNftClaimable(address,uint256)"(
      user: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateNFT(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateNFT(uint256,address)"(
      tokenId: BigNumberish,
      manualLiquidationAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rescue()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumsForStrikes(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPremiumsForStrikes(uint256[],uint256[])"(
      strikes: BigNumberish[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStrikes(uint256[])"(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "settle(uint256,address)"(
      strike_: BigNumberish,
      buyersVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startNewEpochWithExpiry(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startNewEpochWithExpiry(uint256)"(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalEpochNftDepositsForStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalEpochNftDepositsForStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEpochNFTDepositsForStrike(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userEpochNFTDepositsForStrike(uint256,bytes32,uint256)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEpochNftClaimableStatus(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userEpochNftClaimableStatus(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userWethBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersForThatEpochStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usersForThatEpochStrike(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethRequiredToReclaimNFT(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wethRequiredToReclaimNFT(address,uint256)"(
      user: string,
      strike_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAllClaimableNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAllClaimableNFTs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
