/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NftOptionSellersVaultFactoryInterface extends ethers.utils.Interface {
  functions: {
    "OPTION_WRITER_SALT()": FunctionFragment;
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "deployNftOptionVault(string,address)": FunctionFragment;
    "getVaultFromOptionParams(string,address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isVaultDeployed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "OPTION_WRITER_SALT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "deauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployNftOptionVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFromOptionParams",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultDeployed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "OPTION_WRITER_SALT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNftOptionVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFromOptionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {};
}

export class NftOptionSellersVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NftOptionSellersVaultFactoryInterface;

  functions: {
    OPTION_WRITER_SALT(overrides?: CallOverrides): Promise<[string]>;

    "OPTION_WRITER_SALT()"(overrides?: CallOverrides): Promise<[string]>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployNftOptionVault(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployNftOptionVault(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVaultFromOptionParams(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getVaultFromOptionParams(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVaultDeployed(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isVaultDeployed(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  OPTION_WRITER_SALT(overrides?: CallOverrides): Promise<string>;

  "OPTION_WRITER_SALT()"(overrides?: CallOverrides): Promise<string>;

  authorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "authorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deauthorize(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deauthorize(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployNftOptionVault(
    nft: string,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployNftOptionVault(string,address)"(
    nft: string,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVaultFromOptionParams(
    nft: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVaultFromOptionParams(string,address)"(
    nft: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

  "isAuthorized(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultDeployed(vault: string, overrides?: CallOverrides): Promise<boolean>;

  "isVaultDeployed(address)"(
    vault: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setOwner(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OPTION_WRITER_SALT(overrides?: CallOverrides): Promise<string>;

    "OPTION_WRITER_SALT()"(overrides?: CallOverrides): Promise<string>;

    authorize(who: string, overrides?: CallOverrides): Promise<void>;

    "authorize(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deauthorize(who: string, overrides?: CallOverrides): Promise<void>;

    "deauthorize(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployNftOptionVault(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployNftOptionVault(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFromOptionParams(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVaultFromOptionParams(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<boolean>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultDeployed(vault: string, overrides?: CallOverrides): Promise<boolean>;

    "isVaultDeployed(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setOwner(who: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(who: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OPTION_WRITER_SALT(overrides?: CallOverrides): Promise<BigNumber>;

    "OPTION_WRITER_SALT()"(overrides?: CallOverrides): Promise<BigNumber>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployNftOptionVault(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployNftOptionVault(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVaultFromOptionParams(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultFromOptionParams(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultDeployed(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVaultDeployed(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OPTION_WRITER_SALT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OPTION_WRITER_SALT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "authorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deauthorize(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deauthorize(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployNftOptionVault(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployNftOptionVault(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVaultFromOptionParams(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultFromOptionParams(string,address)"(
      nft: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultDeployed(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVaultDeployed(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
